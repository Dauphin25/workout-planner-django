<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Workout Planner Django API&#10;&#10;---&#10;&#10;##  Project Overview&#10;&#10;This project is a RESTful API for a **Personalized Workout Planner** system.  &#10;It enables users to create and manage customized workout plans, track fitness goals, and monitor progress.  &#10;Key features include secure authentication, a rich database of exercises, goal tracking, achievements, and guided workout sessions.&#10;&#10;##  Test Credentials &#10;&#10;Use the following credentials and token for API testing:&#10;&#10;- **Username:** `trainer`&#10;- **Email:** `trainer@gmail.com`&#10;- **Refresh Token:**  &#10;  ```&#10;  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTc2NTQ0Nzk0MSwiaWF0IjoxNzU5Mzk5OTQxLCJqdGkiOiIyY2RmNzM3YjlhZTE0NjYwODgyNDkyMWI0YWE4MDE4ZSIsInVzZXJfaWQiOiI2In0.JY8-3FcnDAdjT5esETA0dGV78jDCSlOauodF-iopNOg&#10;  ```&#10;&#10;You can use this token for testing JWT authentication endpoints and user-specific API features.&#10;&#10;### Core Features&#10;&#10;- **User Authentication:** Secure registration, login, and logout using JWT.&#10;- **Predefined Exercises Database:** 20+ diverse exercises with details and muscle targeting.&#10;- **Personalized Workout Plans:** Users create and customize plans, select exercises, and set session details.&#10;- **Tracking &amp; Goals:** Weight logs, goal tracking, and achievement recording.&#10;- **API Documentation:** Swagger and Redoc for easy endpoint testing.&#10;- **Bonus:** Guided workout mode.&#10;&#10;---&#10;&#10;##  Conceptual Relationships&#10;&#10;- A __User__ can register, log in, and log out.&#10;- A __User__  can create multiple __Workout Plans__ (**One-to-Many**).&#10;- A __User__  has one __Profile__ (**One-to-One**).&#10;- A __User__  can track multiple __Progress Records__ (**One-to-Many**).&#10;- A __User__  can set multiple __Fitness Goals__ (**One-to-Many**).&#10;- A __Workout Plan__  contains multiple __Workout Weeks__ (**One-to-Many**).&#10;- A __Workout Week__  contains multiple __Workout Days__ (**One-to-Many**).&#10;- A __Workout Day__  contains multiple __Workout Exercises__ (**One-to-Many**).&#10;- A __Workout Exercise__  references an __Exercise__.&#10;&#10;&#10;&#10;```mermaid&#10;erDiagram&#10;    USER ||--|| PROFILE : &quot;has&quot;&#10;    USER ||--o{ WORKOUT_PLAN : &quot;creates&quot;&#10;    USER ||--o{ PROGRESS_RECORD : &quot;tracks&quot;&#10;    USER ||--o{ GOAL : &quot;sets&quot;&#10;    WORKOUT_PLAN ||--o{ WORKOUT_WEEK : &quot;contains&quot;&#10;    WORKOUT_WEEK ||--o{ WORKOUT_DAY : &quot;contains&quot;&#10;    WORKOUT_DAY ||--o{ WORKOUT_EXERCISE : &quot;contains&quot;&#10;    WORKOUT_EXERCISE }o--|| EXERCISE : &quot;references&quot;&#10;    PROFILE {&#10;        int id PK&#10;        int user_id FK&#10;        float weight&#10;        float height&#10;        string lifestyle&#10;        int age&#10;        string gender&#10;        string bio&#10;        string dietary_preference&#10;    }&#10;    USER {&#10;        int id PK&#10;        string email&#10;        string username&#10;        string first_name&#10;        string last_name&#10;        string phone_number&#10;        string city&#10;        date date_of_birth&#10;        datetime registration_date&#10;        string password&#10;    }&#10;    WORKOUT_PLAN {&#10;        int id PK&#10;        int user_id FK&#10;        string title&#10;        string description&#10;        int frequency_per_week&#10;        int daily_session_duration&#10;        int goal_id FK&#10;        string difficulty&#10;        date start_date&#10;        date end_date&#10;        decimal progress&#10;        bool is_active&#10;        datetime created_at&#10;        datetime updated_at&#10;    }&#10;    WORKOUT_WEEK {&#10;        int id PK&#10;        int workout_plan_id FK&#10;        int week_number&#10;        date start_date&#10;        date end_date&#10;        decimal progress&#10;        bool is_active&#10;        datetime created_at&#10;        datetime updated_at&#10;    }&#10;    WORKOUT_DAY {&#10;        int id PK&#10;        int workout_week_id FK&#10;        string day_of_week&#10;        int order&#10;        string focus_area&#10;        string notes&#10;        bool is_rest_day&#10;        decimal session_rating&#10;        int calories_burned&#10;        datetime created_at&#10;        datetime updated_at&#10;    }&#10;    WORKOUT_EXERCISE {&#10;        int id PK&#10;        int workout_day_id FK&#10;        int exercise_id FK&#10;        int sets&#10;        int repetitions&#10;        int duration_seconds&#10;        int distance_meters&#10;        int rest_seconds&#10;        string notes&#10;        int order&#10;        string intensity&#10;        string tempo&#10;        bool completed&#10;        string feedback&#10;    }&#10;    GOAL {&#10;        int id PK&#10;        string name&#10;        string description&#10;        string goal_type&#10;        int recommended_duration_weeks&#10;        string status&#10;        string feedback&#10;        datetime created_at&#10;        datetime updated_at&#10;    }&#10;    EXERCISE {&#10;        int id PK&#10;        string name&#10;        string description&#10;        string instructions&#10;        string equipment&#10;        string difficulty&#10;        string exercise_type&#10;        int calories_burned&#10;        int duration&#10;        string tips&#10;        datetime created_at&#10;        datetime updated_at&#10;    }&#10;    MUSCLE {&#10;        int id PK&#10;        string name&#10;        string group&#10;        string description&#10;        string origin&#10;        string insertion&#10;        string function&#10;    }&#10;    EXERCISE }o--o{ MUSCLE : &quot;targets&quot;&#10;```&#10;&#10;&#10;## ️ Database Seeding&#10;&#10;- The initial set of 20+ predefined exercises is provided in JSON files located in the `exercises/fixtures/exercises.json` folder.&#10;- Muscle groups are seeded from `exercises/fixtures/muscles.json`.&#10;- You can populate the database with workout plans, workout weeks, workout days, workout exercises, and goals using the JSON files in `workout_plan/fixtures/`:&#10;  - `workout_plans.json`&#10;  - `workout_days.json`&#10;  - `workout_exercises.json`&#10;  - `goals.json`&#10;- To populate the database, use:&#10;  ```bash&#10;  python manage.py loaddata exercises/fixtures/exercises.json&#10;  python manage.py loaddata exercises/fixtures/muscles.json&#10;  python manage.py loaddata workout_plan/fixtures/goals.json&#10;  python manage.py loaddata workout_plan/fixtures/workout_plans.json&#10;  python manage.py loaddata workout_plan/fixtures/workout_days.json&#10;  python manage.py loaddata workout_plan/fixtures/workout_exercises.json&#10;  ```&#10;- You can customize or extend these seed files as needed.&#10;&#10;---&#10;&#10;##  API Authentication&#10;&#10;- All sensitive endpoints require JWT authentication.&#10;- Obtain tokens via `/api/users/login/` or `/api/token/`.&#10;- Include the access token in the `Authorization` header:&#10;  ```&#10;  Authorization: Bearer &lt;your_access_token&gt;&#10;  ```&#10;- Endpoints for token management:&#10;  - `/api/token/` – Obtain token pair.&#10;  - `/api/token/refresh/` – Refresh token.&#10;  - `/api/token/verify/` – Verify token.&#10;&#10;---&#10;&#10;&#10;##  API Documentation&#10;&#10;- **Swagger UI:** [http://localhost:8000/swagger/](http://localhost:8000/swagger/)&#10;- **Redoc UI:** [http://localhost:8000/redoc/](http://localhost:8000/redoc/)&#10;- **OpenAPI Schema:** [http://localhost:8000/swagger.json](http://localhost:8000/swagger.json)&#10;&#10;---&#10;&#10;##  API Endpoint Overview&#10;&#10;### User Endpoints (`users/urls.py`)&#10;- `/api/users/register/` – Register a new user.&#10;- `/api/users/login/` – Obtain JWT tokens for authentication.&#10;- `/api/users/logout/` – Logout and blacklist refresh token.&#10;&#10;### Profile Endpoints&#10;- `/api/profiles/` – Manage user profile (weight, height, lifestyle, etc.).&#10;&#10;### Exercise &amp; Muscle Endpoints (`exercises/urls.py`)&#10;- `/api/exercises/` – List, create, update, delete, and search exercises.&#10;- `/api/muscles/` – List and retrieve muscle groups and details.&#10;&#10;### Workout Plan Endpoints (`workout_plan/urls.py`)&#10;- `/api/plans/` – CRUD for workout plans.&#10;- `/api/weeks/` – CRUD for workout weeks within a plan.&#10;- `/api/workout-days/` – CRUD for workout days within a week.&#10;- `/api/workout-exercises/` – CRUD for exercises within a workout day.&#10;&#10;### Tracking &amp; Achievements Endpoints (`tracking/urls.py`)&#10;- `/api/weight-logs/` – Track and manage user's weight history.&#10;- `/api/goal-trackings/` – Track progress toward specific fitness goals.&#10;- `/api/achievements/` – Record exercise achievements and milestones.&#10;&#10;### JWT Authentication Endpoints&#10;- `/api/token/` – Obtain JWT token pair.&#10;- `/api/token/refresh/` – Refresh JWT token.&#10;- `/api/token/verify/` – Verify JWT token.&#10;&#10;### API Documentation&#10;- `/swagger/` – Swagger UI.&#10;- `/redoc/` – Redoc UI.&#10;- `/swagger.json` – OpenAPI schema.&#10;&#10;---&#10;&#10;&#10;---&#10;&#10;##  Exercise Endpoints&#10;&#10;- `/api/exercises/` – List, create, update, delete, and search exercises.&#10;    - Supports filtering by: `difficulty`, `exercise_type`, `equipment`, `target_muscles`.&#10;    - Supports searching by: `name`, `description`, `equipment`, `instructions`, `tips`.&#10;    - Supports ordering by: `name`, `difficulty`, `exercise_type`, `created_at`.&#10;    - List endpoint returns a concise summary; detail endpoint returns full info.&#10;- `/api/muscles/` – List and retrieve muscle groups and details.&#10;&#10;**Permissions:**  &#10;- Listing and retrieving exercises/muscles is open (`AllowAny`).&#10;- Creating, updating, and deleting exercises requires authentication (`IsAuthenticated`).&#10;&#10;---&#10;&#10;##  Workout Plan Endpoints&#10;&#10;- `/api/workout-plans/` – CRUD for workout plans (title, description, frequency, goal, etc.).&#10;    - Only authenticated users can access and manage their own plans.&#10;- `/api/weeks/` – CRUD for workout weeks within a plan.&#10;    - Each week is linked to a workout plan and has a number, start date, end date, progress, and activity status.&#10;- `/api/workout-days/` – CRUD for workout days within a week.&#10;    - Each day is unique per week and includes focus area, notes, session rating, calories burned, etc.&#10;- `/api/workout-exercises/` – CRUD for exercises within a workout day.&#10;    - Each exercise is linked to a workout day and references an exercise.&#10;    - Includes sets, reps, duration, rest, intensity, tempo, completion, feedback.&#10;&#10;**Permissions:**  &#10;- All workout plan/week/day/exercise endpoints require authentication (`IsAuthenticated`).&#10;- Users only see and manage their own plans, weeks, days, and exercises.&#10;&#10;---&#10;&#10;##  Goal Endpoints&#10;&#10;- `/api/goals/` – CRUD for fitness goals (weight loss, muscle gain, etc.).&#10;    - Each goal has a name, type, description, duration, status, and feedback.&#10;&#10;---&#10;&#10;##  Tracking &amp; Achievements Endpoints&#10;&#10;### Weight Log&#10;&#10;- `/api/weight-logs/` – Track and manage user's weight history.&#10;    - Fields: `weight_kg`, `bmi`, `body_fat_percent`, `logged_at`, `notes`.&#10;    - Supports searching by `notes` and ordering by `logged_at`, `weight_kg`, `bmi`.&#10;    - Only authenticated users can access their own logs.&#10;&#10;### Goal Tracking&#10;&#10;- `/api/goal-trackings/` – Track progress toward specific fitness goals.&#10;    - Fields: `goal`, `target_value`, `current_value`, `starting_weight`, `ending_weight`, `progress_percent`, `notes`, `is_achieved`, `started_at`, `achieved_at`.&#10;    - Supports searching by `notes` and ordering by `started_at`, `progress_percent`.&#10;    - Only authenticated users can access their own goal tracking records.&#10;&#10;### Achievement&#10;&#10;- `/api/achievements/` – Record exercise achievements and milestones.&#10;    - Fields: `exercise`, `description`, `value`, `achieved_at`, `notes`.&#10;    - Supports searching by `description`, `notes` and ordering by `achieved_at`, `value`.&#10;    - Only authenticated users can access their own achievements.&#10;&#10;**Permissions:**  &#10;- All tracking and achievement endpoints require authentication (`IsAuthenticated`).&#10;- Users only see and manage their own records.&#10;&#10;---&#10;&#10;## ️ Guided Workout Mode (Bonus Feature)&#10;&#10;- Real-time workout guidance: next exercise, sets, reps, rest periods.&#10;- Users can mark exercises as complete and note adjustments.&#10;- Accessible via `/api/workout-mode/` (see API docs for details).&#10;&#10;---&#10;&#10;##  Docker Setup&#10;&#10;1. Build and start the containers:&#10;   ```bash&#10;   docker-compose up --build&#10;   ```&#10;2. The Django app will be available at [http://localhost:8000](http://localhost:8000).&#10;3. The PostgreSQL database will be available at port 5432.&#10;&#10;**Environment variables** are managed in the `.env` file.&#10;&#10;To run migrations and seed data:&#10;```bash&#10;docker-compose exec web python manage.py migrate&#10;docker-compose exec web python manage.py loaddata &lt;your-fixture&gt;.json&#10;```&#10;" />
              <option name="updatedContent" value="# Workout Planner Django API&#10;&#10;---&#10;&#10;##  Project Overview&#10;&#10;This project is a RESTful API for a **Personalized Workout Planner** system.  &#10;It enables users to create and manage customized workout plans, track fitness goals, and monitor progress.  &#10;Key features include secure authentication, a rich database of exercises, goal tracking, achievements, and guided workout sessions.&#10;&#10;##  Test Credentials &#10;&#10;Use the following credentials and token for API testing:&#10;&#10;- **Username:** `trainer`&#10;- **Email:** `trainer@gmail.com`&#10;- **Refresh Token:**  &#10;  ```&#10;  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTc2NTQ0Nzk0MSwiaWF0IjoxNzU5Mzk5OTQxLCJqdGkiOiIyY2RmNzM3YjlhZTE0NjYwODgyNDkyMWI0YWE4MDE4ZSIsInVzZXJfaWQiOiI2In0.JY8-3FcnDAdjT5esETA0dGV78jDCSlOauodF-iopNOg&#10;  ```&#10;&#10;You can use this token for testing JWT authentication endpoints and user-specific API features.&#10;&#10;### Core Features&#10;&#10;- **User Authentication:** Secure registration, login, and logout using JWT.&#10;- **Predefined Exercises Database:** 20+ diverse exercises with details and muscle targeting.&#10;- **Personalized Workout Plans:** Users create and customize plans, select exercises, and set session details.&#10;- **Tracking &amp; Goals:** Weight logs, goal tracking, and achievement recording.&#10;- **API Documentation:** Swagger and Redoc for easy endpoint testing.&#10;- **Bonus:** Guided workout mode.&#10;&#10;---&#10;&#10;##  Conceptual Relationships&#10;&#10;- A __User__ can register, log in, and log out.&#10;- A __User__  can create multiple __Workout Plans__ (**One-to-Many**).&#10;- A __User__  has one __Profile__ (**One-to-One**).&#10;- A __User__  can track multiple __Progress Records__ (**One-to-Many**).&#10;- A __User__  can set multiple __Fitness Goals__ (**One-to-Many**).&#10;- A __Workout Plan__  contains multiple __Workout Weeks__ (**One-to-Many**).&#10;- A __Workout Week__  contains multiple __Workout Days__ (**One-to-Many**).&#10;- A __Workout Day__  contains multiple __Workout Exercises__ (**One-to-Many**).&#10;- A __Workout Exercise__  references an __Exercise__.&#10;&#10;&#10;&#10;```mermaid&#10;erDiagram&#10;    USER ||--|| PROFILE : &quot;has&quot;&#10;    USER ||--o{ WORKOUT_PLAN : &quot;creates&quot;&#10;    USER ||--o{ PROGRESS_RECORD : &quot;tracks&quot;&#10;    USER ||--o{ GOAL : &quot;sets&quot;&#10;    WORKOUT_PLAN ||--o{ WORKOUT_WEEK : &quot;contains&quot;&#10;    WORKOUT_WEEK ||--o{ WORKOUT_DAY : &quot;contains&quot;&#10;    WORKOUT_DAY ||--o{ WORKOUT_EXERCISE : &quot;contains&quot;&#10;    WORKOUT_EXERCISE }o--|| EXERCISE : &quot;references&quot;&#10;    PROFILE {&#10;        int id PK&#10;        int user_id FK&#10;        float weight&#10;        float height&#10;        string lifestyle&#10;        int age&#10;        string gender&#10;        string bio&#10;        string dietary_preference&#10;    }&#10;    USER {&#10;        int id PK&#10;        string email&#10;        string username&#10;        string first_name&#10;        string last_name&#10;        string phone_number&#10;        string city&#10;        date date_of_birth&#10;        datetime registration_date&#10;        string password&#10;    }&#10;    WORKOUT_PLAN {&#10;        int id PK&#10;        int user_id FK&#10;        string title&#10;        string description&#10;        int frequency_per_week&#10;        int daily_session_duration&#10;        int goal_id FK&#10;        string difficulty&#10;        date start_date&#10;        date end_date&#10;        decimal progress&#10;        bool is_active&#10;        datetime created_at&#10;        datetime updated_at&#10;    }&#10;    WORKOUT_WEEK {&#10;        int id PK&#10;        int workout_plan_id FK&#10;        int week_number&#10;        date start_date&#10;        date end_date&#10;        decimal progress&#10;        bool is_active&#10;        datetime created_at&#10;        datetime updated_at&#10;    }&#10;    WORKOUT_DAY {&#10;        int id PK&#10;        int workout_week_id FK&#10;        string day_of_week&#10;        int order&#10;        string focus_area&#10;        string notes&#10;        bool is_rest_day&#10;        decimal session_rating&#10;        int calories_burned&#10;        datetime created_at&#10;        datetime updated_at&#10;    }&#10;    WORKOUT_EXERCISE {&#10;        int id PK&#10;        int workout_day_id FK&#10;        int exercise_id FK&#10;        int sets&#10;        int repetitions&#10;        int duration_seconds&#10;        int distance_meters&#10;        int rest_seconds&#10;        string notes&#10;        int order&#10;        string intensity&#10;        string tempo&#10;        bool completed&#10;        string feedback&#10;    }&#10;    GOAL {&#10;        int id PK&#10;        string name&#10;        string description&#10;        string goal_type&#10;        int recommended_duration_weeks&#10;        string status&#10;        string feedback&#10;        datetime created_at&#10;        datetime updated_at&#10;    }&#10;    EXERCISE {&#10;        int id PK&#10;        string name&#10;        string description&#10;        string instructions&#10;        string equipment&#10;        string difficulty&#10;        string exercise_type&#10;        int calories_burned&#10;        int duration&#10;        string tips&#10;        datetime created_at&#10;        datetime updated_at&#10;    }&#10;    MUSCLE {&#10;        int id PK&#10;        string name&#10;        string group&#10;        string description&#10;        string origin&#10;        string insertion&#10;        string function&#10;    }&#10;    EXERCISE }o--o{ MUSCLE : &quot;targets&quot;&#10;```&#10;&#10;&#10;## ️ Database Seeding&#10;&#10;- The initial set of 20+ predefined exercises is provided in JSON files located in the `exercises/fixtures/exercises.json` folder.&#10;- Muscle groups are seeded from `exercises/fixtures/muscles.json`.&#10;- You can populate the database with workout plans, workout weeks, workout days, workout exercises, and goals using the JSON files in `workout_plan/fixtures/`:&#10;  - `workout_plans.json`&#10;  - `workout_days.json`&#10;  - `workout_exercises.json`&#10;  - `goals.json`&#10;- To populate the database, use:&#10;  ```bash&#10;  python manage.py loaddata exercises/fixtures/exercises.json&#10;  python manage.py loaddata exercises/fixtures/muscles.json&#10;  python manage.py loaddata workout_plan/fixtures/goals.json&#10;  python manage.py loaddata workout_plan/fixtures/workout_plans.json&#10;  python manage.py loaddata workout_plan/fixtures/workout_days.json&#10;  python manage.py loaddata workout_plan/fixtures/workout_exercises.json&#10;  ```&#10;- You can customize or extend these seed files as needed.&#10;&#10;---&#10;&#10;##  API Authentication&#10;&#10;- All sensitive endpoints require JWT authentication.&#10;- Obtain tokens via `/api/users/login/` or `/api/token/`.&#10;- Include the access token in the `Authorization` header:&#10;  ```&#10;  Authorization: Bearer &lt;your_access_token&gt;&#10;  ```&#10;- Endpoints for token management:&#10;  - `/api/token/` – Obtain token pair.&#10;  - `/api/token/refresh/` – Refresh token.&#10;  - `/api/token/verify/` – Verify token.&#10;&#10;---&#10;&#10;&#10;##  API Documentation&#10;&#10;- **Swagger UI:** [http://localhost:8000/swagger/](http://localhost:8000/swagger/)&#10;- **Redoc UI:** [http://localhost:8000/redoc/](http://localhost:8000/redoc/)&#10;- **OpenAPI Schema:** [http://localhost:8000/swagger.json](http://localhost:8000/swagger.json)&#10;&#10;---&#10;&#10;##  API Endpoint Overview&#10;&#10;### User Endpoints (`users/urls.py`)&#10;- `/api/users/register/` – Register a new user.&#10;- `/api/users/login/` – Obtain JWT tokens for authentication.&#10;- `/api/users/logout/` – Logout and blacklist refresh token.&#10;&#10;### Profile Endpoints&#10;- `/api/profiles/` – Manage user profile (weight, height, lifestyle, etc.).&#10;&#10;### Exercise &amp; Muscle Endpoints (`exercises/urls.py`)&#10;- `/api/exercises/` – List, create, update, delete, and search exercises.&#10;- `/api/muscles/` – List and retrieve muscle groups and details.&#10;&#10;### Workout Plan Endpoints (`workout_plan/urls.py`)&#10;- `/api/plans/` – CRUD for workout plans.&#10;- `/api/weeks/` – CRUD for workout weeks within a plan.&#10;- `/api/workout-days/` – CRUD for workout days within a week.&#10;- `/api/workout-exercises/` – CRUD for exercises within a workout day.&#10;&#10;### Tracking &amp; Achievements Endpoints (`tracking/urls.py`)&#10;- `/api/weight-logs/` – Track and manage user's weight history.&#10;- `/api/goal-trackings/` – Track progress toward specific fitness goals.&#10;- `/api/achievements/` – Record exercise achievements and milestones.&#10;&#10;### JWT Authentication Endpoints&#10;- `/api/token/` – Obtain JWT token pair.&#10;- `/api/token/refresh/` – Refresh JWT token.&#10;- `/api/token/verify/` – Verify JWT token.&#10;&#10;### API Documentation&#10;- `/swagger/` – Swagger UI.&#10;- `/redoc/` – Redoc UI.&#10;- `/swagger.json` – OpenAPI schema.&#10;&#10;---&#10;&#10;&#10;---&#10;&#10;##  Exercise Endpoints&#10;&#10;- `/api/exercises/` – List, create, update, delete, and search exercises.&#10;    - Supports filtering by: `difficulty`, `exercise_type`, `equipment`, `target_muscles`.&#10;    - Supports searching by: `name`, `description`, `equipment`, `instructions`, `tips`.&#10;    - Supports ordering by: `name`, `difficulty`, `exercise_type`, `created_at`.&#10;    - List endpoint returns a concise summary; detail endpoint returns full info.&#10;- `/api/muscles/` – List and retrieve muscle groups and details.&#10;&#10;**Permissions:**  &#10;- Listing and retrieving exercises/muscles is open (`AllowAny`).&#10;- Creating, updating, and deleting exercises requires authentication (`IsAuthenticated`).&#10;&#10;---&#10;&#10;##  Workout Plan Endpoints&#10;&#10;- `/api/workout-plans/` – CRUD for workout plans (title, description, frequency, goal, etc.).&#10;    - Only authenticated users can access and manage their own plans.&#10;- `/api/weeks/` – CRUD for workout weeks within a plan.&#10;    - Each week is linked to a workout plan and has a number, start date, end date, progress, and activity status.&#10;- `/api/workout-days/` – CRUD for workout days within a week.&#10;    - Each day is unique per week and includes focus area, notes, session rating, calories burned, etc.&#10;- `/api/workout-exercises/` – CRUD for exercises within a workout day.&#10;    - Each exercise is linked to a workout day and references an exercise.&#10;    - Includes sets, reps, duration, rest, intensity, tempo, completion, feedback.&#10;&#10;**Permissions:**  &#10;- All workout plan/week/day/exercise endpoints require authentication (`IsAuthenticated`).&#10;- Users only see and manage their own plans, weeks, days, and exercises.&#10;&#10;---&#10;&#10;##  Goal Endpoints&#10;&#10;- `/api/goals/` – CRUD for fitness goals (weight loss, muscle gain, etc.).&#10;    - Each goal has a name, type, description, duration, status, and feedback.&#10;&#10;---&#10;&#10;##  Tracking &amp; Achievements Endpoints&#10;&#10;### Weight Log&#10;&#10;- `/api/weight-logs/` – Track and manage user's weight history.&#10;    - Fields: `weight_kg`, `bmi`, `body_fat_percent`, `logged_at`, `notes`.&#10;    - Supports searching by `notes` and ordering by `logged_at`, `weight_kg`, `bmi`.&#10;    - Only authenticated users can access their own logs.&#10;&#10;### Goal Tracking&#10;&#10;- `/api/goal-trackings/` – Track progress toward specific fitness goals.&#10;    - Fields: `goal`, `target_value`, `current_value`, `starting_weight`, `ending_weight`, `progress_percent`, `notes`, `is_achieved`, `started_at`, `achieved_at`.&#10;    - Supports searching by `notes` and ordering by `started_at`, `progress_percent`.&#10;    - Only authenticated users can access their own goal tracking records.&#10;&#10;### Achievement&#10;&#10;- `/api/achievements/` – Record exercise achievements and milestones.&#10;    - Fields: `exercise`, `description`, `value`, `achieved_at`, `notes`.&#10;    - Supports searching by `description`, `notes` and ordering by `achieved_at`, `value`.&#10;    - Only authenticated users can access their own achievements.&#10;&#10;**Permissions:**  &#10;- All tracking and achievement endpoints require authentication (`IsAuthenticated`).&#10;- Users only see and manage their own records.&#10;&#10;---&#10;&#10;## ️ Guided Workout Mode (Bonus Feature)&#10;&#10;- Real-time workout guidance: next exercise, sets, reps, rest periods.&#10;- Users can mark exercises as complete and note adjustments.&#10;- Accessible via `/api/workout-mode/` (see API docs for details).&#10;&#10;---&#10;&#10;##  Docker Setup&#10;&#10;1. Build and start the containers:&#10;   ```bash&#10;   docker-compose up --build&#10;   ```&#10;2. The Django app will be available at [http://localhost:8000](http://localhost:8000).&#10;3. The PostgreSQL database will be available at port 5432.&#10;&#10;**Environment variables** are managed in the `.env` file.&#10;&#10;To run migrations and seed data:&#10;```bash&#10;docker-compose exec web python manage.py migrate&#10;docker-compose exec web python manage.py loaddata &lt;your-fixture&gt;.json&#10;```" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/users/models/profile.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/users/models/profile.py" />
              <option name="originalContent" value="from django.db import models&#10;from django.db.models.signals import post_save&#10;from django.dispatch import receiver&#10;from django.utils.translation import gettext_lazy as _&#10;from django.contrib.auth.models import AbstractUser&#10;&#10;from users.models.user import User&#10;&#10;&#10;class Profile(models.Model):&#10;    LIFESTYLE_CHOICES = [&#10;        ('sedentary', 'Sedentary'),&#10;        ('light', 'Lightly Active'),&#10;        ('moderate', 'Moderately Active'),&#10;        ('active', 'Active'),&#10;        ('very_active', 'Very Active'),&#10;    ]&#10;&#10;    GENDER_CHOICES = [&#10;        ('male', 'Male'),&#10;        ('female', 'Female'),&#10;        ('other', 'Other'),&#10;        ('prefer_not_to_say', 'Prefer not to say'),&#10;    ]&#10;&#10;    DIETARY_CHOICES = [&#10;        ('none', 'None'),&#10;        ('vegetarian', 'Vegetarian'),&#10;        ('vegan', 'Vegan'),&#10;        ('paleo', 'Paleo'),&#10;        ('keto', 'Keto'),&#10;        ('other', 'Other'),&#10;    ]&#10;&#10;    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')&#10;    weight = models.FloatField(null=True, blank=True)&#10;    height = models.FloatField(null=True, blank=True)&#10;    lifestyle = models.CharField(max_length=20, choices=LIFESTYLE_CHOICES, default='moderate')&#10;    age = models.PositiveIntegerField(null=True, blank=True)&#10;    gender = models.CharField(max_length=20, choices=GENDER_CHOICES, null=True, blank=True)&#10;    bio = models.TextField(_(&quot;Bio&quot;), blank=True, null=True)&#10;    dietary_preference = models.CharField(max_length=20, choices=DIETARY_CHOICES, default='none', blank=True, null=True)&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.user.username}'s profile&quot;&#10;&#10;    @receiver(post_save, sender=User)&#10;    def create_or_update_user_profile(sender, instance, created, **kwargs):&#10;        if created:&#10;            Profile.objects.create(user=instance)&#10;        else:&#10;            if hasattr(instance, 'profile'):&#10;                instance.profile.save()&#10;        &#10;    class Meta:&#10;        verbose_name = _(&quot;Profile&quot;)&#10;        verbose_name_plural = _(&quot;Profiles&quot;)" />
              <option name="updatedContent" value="from django.db import models&#10;from django.db.models.signals import post_save&#10;from django.dispatch import receiver&#10;from django.utils.translation import gettext_lazy as _&#10;from django.contrib.auth.models import AbstractUser&#10;&#10;from users.models.user import User&#10;&#10;&#10;class Profile(models.Model):&#10;    LIFESTYLE_CHOICES = [&#10;        ('sedentary', 'Sedentary'),&#10;        ('light', 'Lightly Active'),&#10;        ('moderate', 'Moderately Active'),&#10;        ('active', 'Active'),&#10;        ('very_active', 'Very Active'),&#10;    ]&#10;&#10;    GENDER_CHOICES = [&#10;        ('male', 'Male'),&#10;        ('female', 'Female'),&#10;        ('other', 'Other'),&#10;        ('prefer_not_to_say', 'Prefer not to say'),&#10;    ]&#10;&#10;    DIETARY_CHOICES = [&#10;        ('none', 'None'),&#10;        ('vegetarian', 'Vegetarian'),&#10;        ('vegan', 'Vegan'),&#10;        ('paleo', 'Paleo'),&#10;        ('keto', 'Keto'),&#10;        ('other', 'Other'),&#10;    ]&#10;&#10;    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')&#10;    weight = models.FloatField(null=True, blank=True)&#10;    height = models.FloatField(null=True, blank=True)&#10;    lifestyle = models.CharField(max_length=20, choices=LIFESTYLE_CHOICES, default='moderate')&#10;    age = models.PositiveIntegerField(null=True, blank=True)&#10;    gender = models.CharField(max_length=20, choices=GENDER_CHOICES, null=True, blank=True)&#10;    bio = models.TextField(_(&quot;Bio&quot;), blank=True, null=True)&#10;    dietary_preference = models.CharField(max_length=20, choices=DIETARY_CHOICES, default='none', blank=True, null=True)&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.user.username}'s profile&quot;&#10;&#10;    @receiver(post_save, sender=User)&#10;    def create_or_update_user_profile(sender, instance, created, **kwargs):&#10;        if created:&#10;            Profile.objects.create(user=instance)&#10;        else:&#10;            if hasattr(instance, 'profile'):&#10;                instance.profile.save()&#10;        &#10;    class Meta:&#10;        verbose_name = _(&quot;Profile&quot;)&#10;        verbose_name_plural = _(&quot;Profiles&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/workout_plan/models/workout_exercise.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/workout_plan/models/workout_exercise.py" />
              <option name="originalContent" value="from django.db import models&#10;from exercises.models.exercise import Exercise&#10;from .workout_day import WorkoutDay&#10;&#10;&#10;class WorkoutExercise(models.Model):&#10;    &quot;&quot;&quot;Represents a specific exercise inside a workout day, with user customizations.&quot;&quot;&quot;&#10;&#10;    INTENSITY_CHOICES = [&#10;        (&quot;low&quot;, &quot;Low&quot;),&#10;        (&quot;medium&quot;, &quot;Medium&quot;),&#10;        (&quot;high&quot;, &quot;High&quot;),&#10;    ]&#10;&#10;    workout_day = models.ForeignKey(&#10;        WorkoutDay,&#10;        on_delete=models.CASCADE,&#10;        related_name=&quot;exercises&quot;,&#10;        verbose_name=&quot;Workout Day&quot;&#10;    )&#10;    exercise = models.ForeignKey(&#10;        Exercise,&#10;        on_delete=models.CASCADE,&#10;        related_name=&quot;workout_entries&quot;,&#10;        verbose_name=&quot;Exercise&quot;&#10;    )&#10;    sets = models.PositiveIntegerField(&#10;        default=3,&#10;        help_text=&quot;Number of sets&quot;,&#10;        verbose_name=&quot;Sets&quot;&#10;    )&#10;    repetitions = models.PositiveIntegerField(&#10;        null=True,&#10;        blank=True,&#10;        help_text=&quot;Reps per set if applicable&quot;,&#10;        verbose_name=&quot;Repetitions&quot;&#10;    )&#10;    duration_seconds = models.PositiveIntegerField(&#10;        null=True,&#10;        blank=True,&#10;        help_text=&quot;Duration in seconds for time-based exercises&quot;,&#10;        verbose_name=&quot;Duration (seconds)&quot;&#10;    )&#10;    distance_meters = models.PositiveIntegerField(&#10;        null=True,&#10;        blank=True,&#10;        help_text=&quot;Distance in meters for cardio exercises&quot;,&#10;        verbose_name=&quot;Distance (meters)&quot;&#10;    )&#10;    rest_seconds = models.PositiveIntegerField(&#10;        default=60,&#10;        help_text=&quot;Rest between sets in seconds&quot;,&#10;        verbose_name=&quot;Rest (seconds)&quot;&#10;    )&#10;    notes = models.TextField(&#10;        blank=True,&#10;        help_text=&quot;User notes or modifications&quot;,&#10;        verbose_name=&quot;Notes&quot;&#10;    )&#10;    order = models.PositiveIntegerField(&#10;        default=1,&#10;        help_text=&quot;The order of this exercise in the workout day&quot;,&#10;        verbose_name=&quot;Order&quot;&#10;    )&#10;    intensity = models.CharField(&#10;        max_length=10,&#10;        choices=INTENSITY_CHOICES,&#10;        default=&quot;medium&quot;,&#10;        verbose_name=&quot;Intensity&quot;,&#10;        help_text=&quot;Intensity level for this exercise&quot;&#10;    )&#10;    tempo = models.CharField(&#10;        max_length=20,&#10;        blank=True,&#10;        verbose_name=&quot;Tempo&quot;,&#10;        help_text=&quot;Tempo for the exercise (e.g., 2-1-2)&quot;&#10;    )&#10;    completed = models.BooleanField(&#10;        default=False,&#10;        verbose_name=&quot;Completed&quot;,&#10;        help_text=&quot;Has the user completed this exercise?&quot;&#10;    )&#10;    feedback = models.TextField(&#10;        blank=True,&#10;        verbose_name=&quot;Feedback&quot;,&#10;        help_text=&quot;User feedback or rating for this exercise&quot;&#10;    )&#10;&#10;    class Meta:&#10;        ordering = [&quot;order&quot;]&#10;        verbose_name = &quot;Workout Exercise&quot;&#10;        verbose_name_plural = &quot;Workout Exercises&quot;&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.exercise.name} in {self.workout_day}&quot;&#10;" />
              <option name="updatedContent" value="from django.db import models&#10;from exercises.models.exercise import Exercise&#10;from .workout_day import WorkoutDay&#10;&#10;&#10;class WorkoutExercise(models.Model):&#10;    &quot;&quot;&quot;Represents a specific exercise inside a workout day, with user customizations.&quot;&quot;&quot;&#10;&#10;    INTENSITY_CHOICES = [&#10;        (&quot;low&quot;, &quot;Low&quot;),&#10;        (&quot;medium&quot;, &quot;Medium&quot;),&#10;        (&quot;high&quot;, &quot;High&quot;),&#10;    ]&#10;&#10;    workout_day = models.ForeignKey(&#10;        WorkoutDay,&#10;        on_delete=models.CASCADE,&#10;        related_name=&quot;exercises&quot;,&#10;        verbose_name=&quot;Workout Day&quot;&#10;    )&#10;    exercise = models.ForeignKey(&#10;        Exercise,&#10;        on_delete=models.CASCADE,&#10;        related_name=&quot;workout_entries&quot;,&#10;        verbose_name=&quot;Exercise&quot;&#10;    )&#10;    sets = models.PositiveIntegerField(&#10;        default=3,&#10;        help_text=&quot;Number of sets&quot;,&#10;        verbose_name=&quot;Sets&quot;&#10;    )&#10;    repetitions = models.PositiveIntegerField(&#10;        null=True,&#10;        blank=True,&#10;        help_text=&quot;Reps per set if applicable&quot;,&#10;        verbose_name=&quot;Repetitions&quot;&#10;    )&#10;    duration_seconds = models.PositiveIntegerField(&#10;        null=True,&#10;        blank=True,&#10;        help_text=&quot;Duration in seconds for time-based exercises&quot;,&#10;        verbose_name=&quot;Duration (seconds)&quot;&#10;    )&#10;    distance_meters = models.PositiveIntegerField(&#10;        null=True,&#10;        blank=True,&#10;        help_text=&quot;Distance in meters for cardio exercises&quot;,&#10;        verbose_name=&quot;Distance (meters)&quot;&#10;    )&#10;    rest_seconds = models.PositiveIntegerField(&#10;        default=60,&#10;        help_text=&quot;Rest between sets in seconds&quot;,&#10;        verbose_name=&quot;Rest (seconds)&quot;&#10;    )&#10;    notes = models.TextField(&#10;        blank=True,&#10;        help_text=&quot;User notes or modifications&quot;,&#10;        verbose_name=&quot;Notes&quot;&#10;    )&#10;    order = models.PositiveIntegerField(&#10;        default=1,&#10;        help_text=&quot;The order of this exercise in the workout day&quot;,&#10;        verbose_name=&quot;Order&quot;&#10;    )&#10;    intensity = models.CharField(&#10;        max_length=10,&#10;        choices=INTENSITY_CHOICES,&#10;        default=&quot;medium&quot;,&#10;        verbose_name=&quot;Intensity&quot;,&#10;        help_text=&quot;Intensity level for this exercise&quot;&#10;    )&#10;    tempo = models.CharField(&#10;        max_length=20,&#10;        blank=True,&#10;        verbose_name=&quot;Tempo&quot;,&#10;        help_text=&quot;Tempo for the exercise (e.g., 2-1-2)&quot;&#10;    )&#10;    completed = models.BooleanField(&#10;        default=False,&#10;        verbose_name=&quot;Completed&quot;,&#10;        help_text=&quot;Has the user completed this exercise?&quot;&#10;    )&#10;    feedback = models.TextField(&#10;        blank=True,&#10;        verbose_name=&quot;Feedback&quot;,&#10;        help_text=&quot;User feedback or rating for this exercise&quot;&#10;    )&#10;&#10;    class Meta:&#10;        ordering = [&quot;order&quot;]&#10;        verbose_name = &quot;Workout Exercise&quot;&#10;        verbose_name_plural = &quot;Workout Exercises&quot;&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.exercise.name} in {self.workout_day}&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/workout_plan/serializers/workout_plan.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/workout_plan/serializers/workout_plan.py" />
              <option name="originalContent" value="from rest_framework import serializers&#10;&#10;from ..models import WorkoutDay&#10;from ..models.workout_plan import WorkoutPlan&#10;from .goal import GoalSerializer&#10;from .workout_day import WorkoutDayCreateSerializer&#10;from .workout_week import WorkoutWeekCreateSerializer&#10;&#10;class WorkoutPlanSerializer(serializers.ModelSerializer):&#10;    goal = GoalSerializer(read_only=True)&#10;    difficulty_label = serializers.CharField(source='get_difficulty_display', read_only=True)&#10;    visibility_label = serializers.SerializerMethodField()&#10;&#10;    class Meta:&#10;        model = WorkoutPlan&#10;        fields = [&#10;            'id', 'user', 'title', 'description', 'frequency_per_week',&#10;            'daily_session_duration', 'goal', 'difficulty', 'difficulty_label',&#10;            'start_date', 'end_date', 'progress', 'is_active',&#10;            'created_at', 'updated_at', 'visibility_label'&#10;        ]&#10;&#10;    def get_visibility_label(self, obj):&#10;        # If you add a visibility field, this will display its label&#10;        if hasattr(obj, 'get_visibility_display'):&#10;            return obj.get_visibility_display()&#10;        return None&#10;&#10;class WorkoutPlanCreateSerializer(serializers.ModelSerializer):&#10;    weeks = WorkoutWeekCreateSerializer(many=True)&#10;&#10;    class Meta:&#10;        model = WorkoutPlan&#10;        fields = [&#10;            'id', 'title', 'description', 'frequency_per_week', 'daily_session_duration',&#10;            'goal', 'difficulty', 'start_date', 'end_date', 'weeks'&#10;        ]&#10;&#10;    def create(self, validated_data):&#10;        weeks_data = validated_data.pop('weeks')&#10;        workout_plan = WorkoutPlan.objects.create(**validated_data)&#10;        for week_data in weeks_data:&#10;            days_data = week_data.pop('days')&#10;            week = workout_plan.weeks.create(**week_data)&#10;            for day_data in days_data:&#10;                day_data['workout_week'] = week&#10;                WorkoutDay.objects.create(**day_data)&#10;        return workout_plan&#10;" />
              <option name="updatedContent" value="from rest_framework import serializers&#10;from ..models.workout_plan import WorkoutPlan&#10;from .goal import GoalSerializer&#10;from .workout_day import WorkoutDayCreateSerializer&#10;from .workout_week import WorkoutWeekCreateSerializer&#10;&#10;class WorkoutPlanSerializer(serializers.ModelSerializer):&#10;    goal = GoalSerializer(read_only=True)&#10;    difficulty_label = serializers.CharField(source='get_difficulty_display', read_only=True)&#10;    visibility_label = serializers.SerializerMethodField()&#10;&#10;    class Meta:&#10;        model = WorkoutPlan&#10;        fields = [&#10;            'id', 'user', 'title', 'description', 'frequency_per_week',&#10;            'daily_session_duration', 'goal', 'difficulty', 'difficulty_label',&#10;            'start_date', 'end_date', 'progress', 'is_active',&#10;            'created_at', 'updated_at', 'visibility_label'&#10;        ]&#10;&#10;    def get_visibility_label(self, obj):&#10;        # If you add a visibility field, this will display its label&#10;        if hasattr(obj, 'get_visibility_display'):&#10;            return obj.get_visibility_display()&#10;        return None&#10;&#10;class WorkoutPlanCreateSerializer(serializers.ModelSerializer):&#10;    weeks = WorkoutWeekCreateSerializer(many=True)&#10;&#10;    class Meta:&#10;        model = WorkoutPlan&#10;        fields = [&#10;            'id', 'title', 'description', 'frequency_per_week', 'daily_session_duration',&#10;            'goal', 'difficulty', 'start_date', 'end_date', 'weeks'&#10;        ]&#10;&#10;    def create(self, validated_data):&#10;        weeks_data = validated_data.pop('weeks')&#10;        workout_plan = WorkoutPlan.objects.create(**validated_data)&#10;        for week_data in weeks_data:&#10;            days_data = week_data.pop('days')&#10;            week = workout_plan.weeks.create(**week_data)&#10;            for day_data in days_data:&#10;                day_data['workout_week'] = week&#10;                WorkoutDay.objects.create(**day_data)&#10;        return workout_plan&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>