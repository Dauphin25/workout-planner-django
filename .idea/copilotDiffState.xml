<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/users/models/profile.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/users/models/profile.py" />
              <option name="originalContent" value="from django.db import models&#10;from django.db.models.signals import post_save&#10;from django.dispatch import receiver&#10;from django.utils.translation import gettext_lazy as _&#10;from django.contrib.auth.models import AbstractUser&#10;&#10;from users.models.user import User&#10;&#10;&#10;class Profile(models.Model):&#10;    LIFESTYLE_CHOICES = [&#10;        ('sedentary', 'Sedentary'),&#10;        ('light', 'Lightly Active'),&#10;        ('moderate', 'Moderately Active'),&#10;        ('active', 'Active'),&#10;        ('very_active', 'Very Active'),&#10;    ]&#10;&#10;    GENDER_CHOICES = [&#10;        ('male', 'Male'),&#10;        ('female', 'Female'),&#10;        ('other', 'Other'),&#10;        ('prefer_not_to_say', 'Prefer not to say'),&#10;    ]&#10;&#10;    DIETARY_CHOICES = [&#10;        ('none', 'None'),&#10;        ('vegetarian', 'Vegetarian'),&#10;        ('vegan', 'Vegan'),&#10;        ('paleo', 'Paleo'),&#10;        ('keto', 'Keto'),&#10;        ('other', 'Other'),&#10;    ]&#10;&#10;    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')&#10;    weight = models.FloatField(null=True, blank=True)&#10;    height = models.FloatField(null=True, blank=True)&#10;    lifestyle = models.CharField(max_length=20, choices=LIFESTYLE_CHOICES, default='moderate')&#10;    age = models.PositiveIntegerField(null=True, blank=True)&#10;    gender = models.CharField(max_length=20, choices=GENDER_CHOICES, null=True, blank=True)&#10;    bio = models.TextField(_(&quot;Bio&quot;), blank=True, null=True)&#10;    dietary_preference = models.CharField(max_length=20, choices=DIETARY_CHOICES, default='none', blank=True, null=True)&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.user.username}'s profile&quot;&#10;&#10;    @receiver(post_save, sender=User)&#10;    def create_or_update_user_profile(sender, instance, created, **kwargs):&#10;        if created:&#10;            Profile.objects.create(user=instance)&#10;        else:&#10;            if hasattr(instance, 'profile'):&#10;                instance.profile.save()&#10;        &#10;    class Meta:&#10;        verbose_name = _(&quot;Profile&quot;)&#10;        verbose_name_plural = _(&quot;Profiles&quot;)" />
              <option name="updatedContent" value="from django.db import models&#10;from django.db.models.signals import post_save&#10;from django.dispatch import receiver&#10;from django.utils.translation import gettext_lazy as _&#10;from django.contrib.auth.models import AbstractUser&#10;&#10;from users.models.user import User&#10;&#10;&#10;class Profile(models.Model):&#10;    LIFESTYLE_CHOICES = [&#10;        ('sedentary', 'Sedentary'),&#10;        ('light', 'Lightly Active'),&#10;        ('moderate', 'Moderately Active'),&#10;        ('active', 'Active'),&#10;        ('very_active', 'Very Active'),&#10;    ]&#10;&#10;    GENDER_CHOICES = [&#10;        ('male', 'Male'),&#10;        ('female', 'Female'),&#10;        ('other', 'Other'),&#10;        ('prefer_not_to_say', 'Prefer not to say'),&#10;    ]&#10;&#10;    DIETARY_CHOICES = [&#10;        ('none', 'None'),&#10;        ('vegetarian', 'Vegetarian'),&#10;        ('vegan', 'Vegan'),&#10;        ('paleo', 'Paleo'),&#10;        ('keto', 'Keto'),&#10;        ('other', 'Other'),&#10;    ]&#10;&#10;    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')&#10;    weight = models.FloatField(null=True, blank=True)&#10;    height = models.FloatField(null=True, blank=True)&#10;    lifestyle = models.CharField(max_length=20, choices=LIFESTYLE_CHOICES, default='moderate')&#10;    age = models.PositiveIntegerField(null=True, blank=True)&#10;    gender = models.CharField(max_length=20, choices=GENDER_CHOICES, null=True, blank=True)&#10;    bio = models.TextField(_(&quot;Bio&quot;), blank=True, null=True)&#10;    dietary_preference = models.CharField(max_length=20, choices=DIETARY_CHOICES, default='none', blank=True, null=True)&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.user.username}'s profile&quot;&#10;&#10;    @receiver(post_save, sender=User)&#10;    def create_or_update_user_profile(sender, instance, created, **kwargs):&#10;        if created:&#10;            Profile.objects.create(user=instance)&#10;        else:&#10;            if hasattr(instance, 'profile'):&#10;                instance.profile.save()&#10;        &#10;    class Meta:&#10;        verbose_name = _(&quot;Profile&quot;)&#10;        verbose_name_plural = _(&quot;Profiles&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/workout_plan/models/workout_exercise.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/workout_plan/models/workout_exercise.py" />
              <option name="originalContent" value="from django.db import models&#10;from exercises.models.exercise import Exercise&#10;from .workout_day import WorkoutDay&#10;&#10;&#10;class WorkoutExercise(models.Model):&#10;    &quot;&quot;&quot;Represents a specific exercise inside a workout day, with user customizations.&quot;&quot;&quot;&#10;&#10;    INTENSITY_CHOICES = [&#10;        (&quot;low&quot;, &quot;Low&quot;),&#10;        (&quot;medium&quot;, &quot;Medium&quot;),&#10;        (&quot;high&quot;, &quot;High&quot;),&#10;    ]&#10;&#10;    workout_day = models.ForeignKey(&#10;        WorkoutDay,&#10;        on_delete=models.CASCADE,&#10;        related_name=&quot;exercises&quot;,&#10;        verbose_name=&quot;Workout Day&quot;&#10;    )&#10;    exercise = models.ForeignKey(&#10;        Exercise,&#10;        on_delete=models.CASCADE,&#10;        related_name=&quot;workout_entries&quot;,&#10;        verbose_name=&quot;Exercise&quot;&#10;    )&#10;    sets = models.PositiveIntegerField(&#10;        default=3,&#10;        help_text=&quot;Number of sets&quot;,&#10;        verbose_name=&quot;Sets&quot;&#10;    )&#10;    repetitions = models.PositiveIntegerField(&#10;        null=True,&#10;        blank=True,&#10;        help_text=&quot;Reps per set if applicable&quot;,&#10;        verbose_name=&quot;Repetitions&quot;&#10;    )&#10;    duration_seconds = models.PositiveIntegerField(&#10;        null=True,&#10;        blank=True,&#10;        help_text=&quot;Duration in seconds for time-based exercises&quot;,&#10;        verbose_name=&quot;Duration (seconds)&quot;&#10;    )&#10;    distance_meters = models.PositiveIntegerField(&#10;        null=True,&#10;        blank=True,&#10;        help_text=&quot;Distance in meters for cardio exercises&quot;,&#10;        verbose_name=&quot;Distance (meters)&quot;&#10;    )&#10;    rest_seconds = models.PositiveIntegerField(&#10;        default=60,&#10;        help_text=&quot;Rest between sets in seconds&quot;,&#10;        verbose_name=&quot;Rest (seconds)&quot;&#10;    )&#10;    notes = models.TextField(&#10;        blank=True,&#10;        help_text=&quot;User notes or modifications&quot;,&#10;        verbose_name=&quot;Notes&quot;&#10;    )&#10;    order = models.PositiveIntegerField(&#10;        default=1,&#10;        help_text=&quot;The order of this exercise in the workout day&quot;,&#10;        verbose_name=&quot;Order&quot;&#10;    )&#10;    intensity = models.CharField(&#10;        max_length=10,&#10;        choices=INTENSITY_CHOICES,&#10;        default=&quot;medium&quot;,&#10;        verbose_name=&quot;Intensity&quot;,&#10;        help_text=&quot;Intensity level for this exercise&quot;&#10;    )&#10;    tempo = models.CharField(&#10;        max_length=20,&#10;        blank=True,&#10;        verbose_name=&quot;Tempo&quot;,&#10;        help_text=&quot;Tempo for the exercise (e.g., 2-1-2)&quot;&#10;    )&#10;    completed = models.BooleanField(&#10;        default=False,&#10;        verbose_name=&quot;Completed&quot;,&#10;        help_text=&quot;Has the user completed this exercise?&quot;&#10;    )&#10;    feedback = models.TextField(&#10;        blank=True,&#10;        verbose_name=&quot;Feedback&quot;,&#10;        help_text=&quot;User feedback or rating for this exercise&quot;&#10;    )&#10;&#10;    class Meta:&#10;        ordering = [&quot;order&quot;]&#10;        verbose_name = &quot;Workout Exercise&quot;&#10;        verbose_name_plural = &quot;Workout Exercises&quot;&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.exercise.name} in {self.workout_day}&quot;&#10;" />
              <option name="updatedContent" value="from django.db import models&#10;from exercises.models.exercise import Exercise&#10;from .workout_day import WorkoutDay&#10;&#10;&#10;class WorkoutExercise(models.Model):&#10;    &quot;&quot;&quot;Represents a specific exercise inside a workout day, with user customizations.&quot;&quot;&quot;&#10;&#10;    INTENSITY_CHOICES = [&#10;        (&quot;low&quot;, &quot;Low&quot;),&#10;        (&quot;medium&quot;, &quot;Medium&quot;),&#10;        (&quot;high&quot;, &quot;High&quot;),&#10;    ]&#10;&#10;    workout_day = models.ForeignKey(&#10;        WorkoutDay,&#10;        on_delete=models.CASCADE,&#10;        related_name=&quot;exercises&quot;,&#10;        verbose_name=&quot;Workout Day&quot;&#10;    )&#10;    exercise = models.ForeignKey(&#10;        Exercise,&#10;        on_delete=models.CASCADE,&#10;        related_name=&quot;workout_entries&quot;,&#10;        verbose_name=&quot;Exercise&quot;&#10;    )&#10;    sets = models.PositiveIntegerField(&#10;        default=3,&#10;        help_text=&quot;Number of sets&quot;,&#10;        verbose_name=&quot;Sets&quot;&#10;    )&#10;    repetitions = models.PositiveIntegerField(&#10;        null=True,&#10;        blank=True,&#10;        help_text=&quot;Reps per set if applicable&quot;,&#10;        verbose_name=&quot;Repetitions&quot;&#10;    )&#10;    duration_seconds = models.PositiveIntegerField(&#10;        null=True,&#10;        blank=True,&#10;        help_text=&quot;Duration in seconds for time-based exercises&quot;,&#10;        verbose_name=&quot;Duration (seconds)&quot;&#10;    )&#10;    distance_meters = models.PositiveIntegerField(&#10;        null=True,&#10;        blank=True,&#10;        help_text=&quot;Distance in meters for cardio exercises&quot;,&#10;        verbose_name=&quot;Distance (meters)&quot;&#10;    )&#10;    rest_seconds = models.PositiveIntegerField(&#10;        default=60,&#10;        help_text=&quot;Rest between sets in seconds&quot;,&#10;        verbose_name=&quot;Rest (seconds)&quot;&#10;    )&#10;    notes = models.TextField(&#10;        blank=True,&#10;        help_text=&quot;User notes or modifications&quot;,&#10;        verbose_name=&quot;Notes&quot;&#10;    )&#10;    order = models.PositiveIntegerField(&#10;        default=1,&#10;        help_text=&quot;The order of this exercise in the workout day&quot;,&#10;        verbose_name=&quot;Order&quot;&#10;    )&#10;    intensity = models.CharField(&#10;        max_length=10,&#10;        choices=INTENSITY_CHOICES,&#10;        default=&quot;medium&quot;,&#10;        verbose_name=&quot;Intensity&quot;,&#10;        help_text=&quot;Intensity level for this exercise&quot;&#10;    )&#10;    tempo = models.CharField(&#10;        max_length=20,&#10;        blank=True,&#10;        verbose_name=&quot;Tempo&quot;,&#10;        help_text=&quot;Tempo for the exercise (e.g., 2-1-2)&quot;&#10;    )&#10;    completed = models.BooleanField(&#10;        default=False,&#10;        verbose_name=&quot;Completed&quot;,&#10;        help_text=&quot;Has the user completed this exercise?&quot;&#10;    )&#10;    feedback = models.TextField(&#10;        blank=True,&#10;        verbose_name=&quot;Feedback&quot;,&#10;        help_text=&quot;User feedback or rating for this exercise&quot;&#10;    )&#10;&#10;    class Meta:&#10;        ordering = [&quot;order&quot;]&#10;        verbose_name = &quot;Workout Exercise&quot;&#10;        verbose_name_plural = &quot;Workout Exercises&quot;&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.exercise.name} in {self.workout_day}&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>